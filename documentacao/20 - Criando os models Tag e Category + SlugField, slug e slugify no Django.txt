        Criando os models Tag e Category + SlugField, slug e slugify no Django


Vamos criar nossas models do blog. Então em models.py de blog faça:

    from django.db import models
    from utils.rands import new_slugfy


    # Create your models here.
    class Tag(models.Model):
        class Meta:
            verbose_name = "Tag"
            verbose_name_plural = "Tags"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)


    class Category(models.Model):
        class Meta:
            verbose_name = "Category"
            verbose_name_plural = "Categories"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)


Agora em admin.py:

    from blog.models import Category, Tag
    from django.contrib import admin


    # Register your models here.
    @admin.register(Tag)
    class TagAdmin(admin.ModelAdmin):
        list_display = "id", "name", "slug"
        list_display_links = "name",
        search_fields = "id", "name", "slug"
        list_per_page = 10
        ordering = "-id",
        prepopulated_fields = {
            "slug": ("name",),
        }


    @admin.register(Category)
    class CategoryAdmin(admin.ModelAdmin):
        list_display = "id", "name", "slug"
        list_display_links = "name",
        search_fields = "id", "name", "slug"
        list_per_page = 10
        ordering = "-id",
        prepopulated_fields = {
            "slug": ("name",),
        }


E para aperfeiçoar, em, utils, vamos criar um novo arquivo chamado rands.py e nele vamos
realizar as seguintes execuções:

    import string
    from random import SystemRandom

    from django.utils.text import slugify


    def random_letters(k=5):
        return ''.join(
            SystemRandom().choices(
                string.ascii_lowercase + string.digits,
                k=k
            )
        )


    def new_slugfy(text, k=5):
        return slugify(text) + "-" + random_letters(k)


PS: Nunca se esqueça de realilizar os migrates e makemigrates após criar uma model.
Sempre reinicie a build do docker.
