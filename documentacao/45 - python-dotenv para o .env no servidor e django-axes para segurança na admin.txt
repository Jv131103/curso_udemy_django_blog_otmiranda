        python-dotenv para o .env no servidor e django-axes para segurança na admin

Primiero vamos abrir nosso ambiente virtual


Depois vamos realizar as instalações:

    pip install python-dotenv

    pip install django-axes


Agora em nosso requiriments.txt, vamos adicionar essas duas libs:

    Django>=5.1.7,<5.2
    psycopg2-binary>=2.9.10,<2.10
    Pillow>=9.5.0,<9.6
    django-summernote>=0.8.20.0,<0.8.21
    python-dotenv>=1.1.1,<1.2
    django-axes>=8.0.0,<8.1


Agora precisamos reexecutar novamente o nosso Docker com essas atualizações

    docker compose up --build --remove-orphans --renew-anon-volumes --force-recreate


E em wsgi.py de project, também vamos adicionar:

    """
    WSGI config for project project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
    """

    import os
    from pathlib import Path

    from django.core.wsgi import get_wsgi_application
    from dotenv import load_dotenv

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')

    # Dotenv
    BASE_DIR = Path(__file__).resolve().parent.parent
    load_dotenv(BASE_DIR.parent / "dotenv_files" / ".env", override=True)

    application = get_wsgi_application()


Agora vamos implementar o Axes do Django.

Voltando a settings.py vamos adicionar:

    """
    Django settings for project project.

    Generated by 'django-admin startproject' using Django 5.1.7.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.1/ref/settings/
    """

    import os
    from pathlib import Path

    from dotenv import load_dotenv

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # /data/web/static
    # /data/web/media
    DATA_DIR = BASE_DIR.parent / 'data' / 'web'  # Essa pasta será criada com o Docker.


    # Dotenv
    load_dotenv(BASE_DIR.parent / "dotenv_files" / ".env", override=True)


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = os.getenv("SECRET_KEY", "change-me")  # Só puxamos o .env de SECRET_KEY

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = bool(int(os.getenv('DEBUG', 0)))  # Busca variáveis de ambiente e pega o valor de debug

    ALLOWED_HOSTS = [
        h.strip() for h in os.getenv("ALLOWED_HOSTS", "").split(",") if h.strip()
    ]  # Aqui fazemos um for aninhado quebrando os valores por ,. Assim ele irá dividir e retornar cada um dos hosts nas .env


    # Application definition

    INSTALLED_APPS = [
        # Config padrçao do django
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # Meus apps
        'blog',
        'site_setup',
        # Summernote
        'django_summernote',
        # Axes: Pode ser colocado em qualquer posição do installed apps
        'axes',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # O axes aqui, deve ser o último da lista sempre
        'axes.middleware.AxesMiddleware',
    ]

    ROOT_URLCONF = 'project.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'site_setup.context_processors.site_setup'
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'project.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': os.getenv("DB_ENGINE", "change-me"),
            'NAME': os.getenv("POSTGRES_DB", "change-me"),
            'USER': os.getenv("POSTGRES_USER", "change-me"),
            'PASSWORD': os.getenv("POSTGRES_PASSWORD", "change-me"),
            'HOST': os.getenv("POSTGRES_HOST", "change-me"),
            'PORT': os.getenv("POSTGRES_PORT", "change-me")
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/5.1/topics/i18n/

    LANGUAGE_CODE = 'pt-br'

    TIME_ZONE = 'America/Sao_Paulo'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.1/howto/static-files/

    STATIC_URL = '/static/'
    STATIC_ROOT = DATA_DIR / 'static'  # Configurando arquivos estáticos em prod

    # Media files
    MEDIA_URL = '/media/'
    MEDIA_ROOT = DATA_DIR / 'media'  # Configurando arquivos de media em prod

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    AUTHENTICATION_BACKENDS = [
        # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
        'axes.backends.AxesStandaloneBackend',

        # Django ModelBackend is the default authentication backend.
        'django.contrib.auth.backends.ModelBackend',
    ]

    SUMMERNOTE_CONFIG = {
        'summernote': {
            # Toolbar customization
            # https://summernote.org/deep-dive/#custom-toolbar-popover
            'toolbar': [
                ['style', ['style', ]],
                ['font', ['bold', 'italic', 'clear']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph', 'hr', ]],
                ['table', ['table']],
                ['insert', ['link', 'picture']],
                ['view', ['fullscreen', 'codeview', 'undo', 'redo']],
            ],
            'codemirror': {
                'mode': 'htmlmixed',
                'lineNumbers': 'true',
                'lineWrapping': 'true',
                'theme': 'dracula',
            },
        },
        'css': (
            '//cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css',
        ),
        'attachment_filesize_limit': 30 * 1024 * 1024,
        'attachment_model': 'blog.PostAttachment',
    }

    AXES_ENABLED = True
    AXES_FAILURE_LIMIT = 3
    AXES_COOLOFF_TIME = 1  # 1 Hora
    AXES_RESET_ON_SUCCESS = True


Agora precisamos subir essas atualizações:

    docker compose run --rm djangoapp python manage.py check

    docker compose run --rm djangoapp python manage.py migrate


Agora, vamos parar rapidamente o nosso container


E agora subimos novamente:

    docker compose up


Caso queira desbloquear o usuário, vamos fazer:

    docker compose run --rm djangoapp python manage.py axes_reset
