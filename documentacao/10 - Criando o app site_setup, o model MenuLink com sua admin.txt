                Criando o app site_setup, o model MenuLink com sua admin


Vamos criar um novo app, que vai ser as configurações do site.

Vamos criar pelo container:

    docker-compose run --rm djangoapp python manage.py startapp site_setup

Agora vamos realizar as configurações em site_setup:

    Em models.py vamos fazer:

        from django.db import models


        # Create your models here.
        class MenuLink(models.Model):
            class Meta:
                verbose_name = "Menu Link"
                verbose_name_plural = "Menu Links"

            text = models.CharField(max_length=50)
            url_or_path = models.CharField(max_length=2048)
            new_tab = models.BooleanField(default=False)

            def __str__(self):
                return self.text

    Agora, vamos em settings.py de project e vamos fazer o seguinte:

        """
        Django settings for project project.

        Generated by 'django-admin startproject' using Django 5.1.7.

        For more information on this file, see
        https://docs.djangoproject.com/en/5.1/topics/settings/

        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.1/ref/settings/
        """

        import os
        from pathlib import Path

        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent

        # /data/web/static
        # /data/web/media
        DATA_DIR = BASE_DIR.parent / 'data' / 'web'  # Essa pasta será criada com o Docker.


        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = os.getenv("SECRET_KEY", "change-me")  # Só puxamos o .env de SECRET_KEY

        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = bool(int(os.getenv('DEBUG', 0)))  # Busca variáveis de ambiente e pega o valor de debug

        ALLOWED_HOSTS = [
            h.strip() for h in os.getenv("ALLOWED_HOSTS", "").split(",") if h.strip()
        ]  # Aqui fazemos um for aninhado quebrando os valores por ,. Assim ele irá dividir e retornar cada um dos hosts nas .env


        # Application definition

        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'blog',
            'site_setup',
        ]

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]

        ROOT_URLCONF = 'project.urls'

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]

        WSGI_APPLICATION = 'project.wsgi.application'


        # Database
        # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': os.getenv("DB_ENGINE", "change-me"),
                'NAME': os.getenv("POSTGRES_DB", "change-me"),
                'USER': os.getenv("POSTGRES_USER", "change-me"),
                'PASSWORD': os.getenv("POSTGRES_PASSWORD", "change-me"),
                'HOST': os.getenv("POSTGRES_HOST", "change-me"),
                'PORT': os.getenv("POSTGRES_PORT", "change-me")
            }
        }


        # Password validation
        # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


        # Internationalization
        # https://docs.djangoproject.com/en/5.1/topics/i18n/

        LANGUAGE_CODE = 'pt-br'

        TIME_ZONE = 'America/Sao_Paulo'

        USE_I18N = True

        USE_TZ = True


        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/5.1/howto/static-files/

        STATIC_URL = '/static/'
        STATIC_ROOT = DATA_DIR / 'static'  # Configurando arquivos estáticos em prod

        # Media files
        MEDIA_URL = '/media/'
        MEDIA_ROOT = DATA_DIR / 'media'  # Configurando arquivos de media em prod

        # Default primary key field type
        # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    Por fim, em admin.py de site_setup, vamos realizar os seguintes comandos:

        from django.contrib import admin
        from site_setup.models import MenuLink


        @admin.register(MenuLink)
        class MenuLinkAdmin(admin.ModelAdmin):
            list_display = "id", "text", "url_or_path"
            list_display_links = "id", "text", "url_or_path"
            search_fields = "id", "text", "url_or_path"

    Porém não podemos esquecer de realizar os migrates:

        docker-compose run --rm djangoapp migrate.sh
        docker-compose run --rm djangoapp makemigrate.sh
