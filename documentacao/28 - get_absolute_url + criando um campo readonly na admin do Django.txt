            get_absolute_url + criando um campo readonly na admin do Django

Em index.html, vamos fazer:

    {% extends 'blog/base.html' %}

    {% block content %}
    <main class="main-content section-wrapper">
        <div class="section-content-wide">
        <div class="section-gap">

            {% if page_obj %}
            <div class="card-grid">
                {% for post in page_obj %}
                {% include 'blog/partials/_post-card.html' with i=forloop.counter0 %}
                {% endfor %}
            </div>
            {% else %}
            <div class="not-found center">
                <h1>Nada encontrado!</h1>
                <p>
                Não encontrei nada nesse link, por favor, clique em outro 
                link do nosso blog ou vá para a <a href="{% url "blog:index" %}">HOME</a>.
                </p>
            </div>
            {% endif %}

        </div>
        </div>
    </main>
    {% endblock content %}

Agora em admin.py de blog, vamos adicionar:

    from blog.models import Category, Page, Post, Tag
    from django.contrib import admin
    from django_summernote.admin import SummernoteModelAdmin
    from django.urls import reverse
    from django.utils.safestring import mark_safe


    # Register your models here.
    @admin.register(Tag)
    class TagAdmin(admin.ModelAdmin):
        list_display = "id", "name", "slug"
        list_display_links = "name",
        search_fields = "id", "name", "slug"
        list_per_page = 10
        ordering = "-id",
        prepopulated_fields = {
            "slug": ("name",),
        }


    @admin.register(Category)
    class CategoryAdmin(admin.ModelAdmin):
        list_display = "id", "name", "slug"
        list_display_links = "name",
        search_fields = "id", "name", "slug"
        list_per_page = 10
        ordering = "-id",
        prepopulated_fields = {
            "slug": ("name",),
        }


    @admin.register(Page)
    class PageAdmin(SummernoteModelAdmin):
        summernote_fields = ('content',)
        list_display = "id", "title", "is_published",
        list_display_links = "title",
        search_fields = "id", "slug", "title", "content"
        list_per_page = 50
        list_filter = "is_published",
        list_editable = "is_published",
        ordering = "-id",
        prepopulated_fields = {
            "slug": ("title",),
        }


    @admin.register(Post)
    class PostAdmin(SummernoteModelAdmin):
        summernote_fields = ('content',)
        list_display = 'id', 'title', 'is_published', 'created_by',
        list_display_links = 'title',
        search_fields = 'id', 'slug', 'title', 'excerpt', 'content',
        list_per_page = 50
        list_filter = 'category', 'is_published',
        list_editable = 'is_published',
        ordering = '-id',
        readonly_fields = 'created_at', 'updated_at', 'created_by', 'updated_by', 'link'
        prepopulated_fields = {
            "slug": ('title',),
        }
        autocomplete_fields = 'tags', 'category',

        def link(self, obj):
            if not obj.pk:
                return "-"

            url_post = obj.get_absolute_url()
            safe_link = mark_safe(f'<a target="_blank" href="{url_post}">VER ESTE POST</a>')
            return safe_link

        def save_model(self, request, obj, form, change):
            if change:
                obj.updated_by = request.user
            else:
                obj.created_by = request.user

            obj.save()

E no models.py de blog, vamos alterar:

    from django.contrib.auth.models import User
    from django.db import models
    from django_summernote.models import AbstractAttachment
    from utils.images import resize_image
    from utils.rands import new_slugfy
    from django.urls import reverse


    class PostAttachment(AbstractAttachment):
        def save(self, *args, **kwargs):
            if not self.name:
                self.name = self.file.name
            current_file_name = str(self.file.name)
            super_save = super().save(*args, **kwargs)
            file_changed = False
            if self.file:
                file_changed = current_file_name != self.file.name
            if file_changed:
                resize_image(self.file, 900)
            return super_save


    # Create your models here.
    class Tag(models.Model):
        class Meta:
            verbose_name = "Tag"
            verbose_name_plural = "Tags"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)

        def __str__(self) -> str:
            return self.name


    class Category(models.Model):
        class Meta:
            verbose_name = "Category"
            verbose_name_plural = "Categories"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)

        def __str__(self) -> str:
            return self.name


    class Page(models.Model):
        title = models.CharField(max_length=65,)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )
        is_published = models.BooleanField(
            default=False,
            help_text=(
                'Este campo precisará estar marcado para'
                'a página ser exibida publicamente.'
            )
        )
        content = models.TextField()

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.title)
            return super().save(*args, **kwargs)

        def __str__(self) -> str:
            return self.title


    class PostManager(models.Manager):
        def get_published(self):
            return self.filter(is_published=True).order_by("-pk")


    class Post(models.Model):
        class Meta:
            verbose_name = "Post"
            verbose_name_plural = "Posts"

        objects = PostManager()

        title = models.CharField(max_length=65,)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )
        excerpt = models.CharField(max_length=150)
        is_published = models.BooleanField(
            default=False,
            help_text=(
                'Este campo precisará estar marcado para'
                'o post ser exibido publicamente.'
            )
        )
        content = models.TextField()
        cover = models.ImageField(upload_to='posts/%Y/%m/', blank=True, default='')
        cover_in_post_content = models.BooleanField(
            default=True,
            help_text=(
                "Se marcado, exibirá a capa dentro do POST."
            )
        )
        created_at = models.DateTimeField(auto_now_add=True)
        created_by = models.ForeignKey(
            User,
            on_delete=models.SET_NULL,
            blank=True, null=True,
            related_name='post_created_by'
        )
        updated_at = models.DateTimeField(auto_now=True)
        updated_by = models.ForeignKey(
            User,
            on_delete=models.SET_NULL,
            blank=True, null=True,
            related_name='post_updated_by'
        )
        category = models.ForeignKey(
            Category, on_delete=models.SET_NULL, null=True, blank=True,
            default=None,
        )
        tags = models.ManyToManyField(Tag, blank=True, default='')

        def __str__(self) -> str:
            return self.title

        def get_absolute_url(self):
            if not self.is_published:
                return reverse('blog:index')
            return reverse('blog:post', args=(self.slug,))

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.title)
            current_cover_name = str(self.cover.name)
            super_save = super().save(*args, **kwargs)
            cover_changed = False
            if self.cover:
                cover_changed = current_cover_name != self.cover.name
            if cover_changed:
                resize_image(self.cover, 900)
            return super_save

E agora, em _post-card.html, vamos mudar:

    <article class="card">
    
    {% if post.cover %}
        <div class="card-cover-wrapper">
        <a href="{{ post.get_absolute_url }}" class="card-cover-link">
            <img 
            class="card-cover"
            loading="lazy"
            src="{{ post.cover.url }}" 
            alt="Cover do post {{ post.title }}"
            >
        </a>
        </div>
    {% endif %}

    <div class="card-text-wrapper">
        <div class="card-title-wrapper">
        <h2 class="card-title">
            <a href="{{ post.get_absolute_url }}" class="card-title-link">
            {{ post.title }}
            </a>
        </h2>
        </div>

        <div class="card-content-wrapper">
        <p class="card-content">
            {{ post.except }}
        </p>

        <div class="card-actions">
            <a class="card-action-link" href="{{ post.get_absolute_url }}">
            <span>Read</span>
            <i class="fa-solid fa-circle-arrow-right"></i>
            </a>
        </div>
        </div>
    </div>

    </article>

