        Configurando variáveis de ambiente com .env e o settings.py do projeto Django


Vamos configurar as variáveis em nossos ambientes:

    1 . Crie um diretório chamado dotenv_files

    2. Crie o arquivo chamado .env-example

        Nele façamos o seguinte:

            SECRET_KEY="CHANGE-ME"

            # 0 False, 1 True
            DEBUG="1"

            # Comma Separated values
            ALLOWED_HOSTS="127.0.0.1, localhost"

            DB_ENGINE="django.db.backends.postgresql"
            POSTGRES_DB="CHANGE-ME"
            POSTGRES_USER="CHANGE-ME"
            POSTGRES_PASSWORD="CHANGE-ME"
            POSTGRES_HOST="localhost"
            POSTGRES_PORT="5432"

    3. Agora, crie o arquivo .env apenas e faça baseando-se na anterior:

        . Gere a sua chave:

            python -c 'from secrets import choice; print("".join([choice("abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)") for _ in range(50)]))'

        . Configure seu .env:

            PS: Esse é meu exemplo:

                SECRET_KEY="ndbgpb9%9+-83)^3*f4_ki8y+rxd+ck4n7ug6-!=nmy(4p&b6d"

                # 0 False, 1 True
                DEBUG="1"

                # Comma Separated values
                ALLOWED_HOSTS="127.0.0.1, localhost"

                DB_ENGINE="django.db.backends.postgresql"
                POSTGRES_DB="blog_base_de_dados"
                POSTGRES_USER="blog_user"
                POSTGRES_PASSWORD="blog_user_password"
                POSTGRES_HOST="localhost"
                POSTGRES_PORT="5432"

    4. Vá em settings.py e dentro de djangoapp/project e faça:

        """
        Django settings for project project.

        Generated by 'django-admin startproject' using Django 5.1.7.

        For more information on this file, see
        https://docs.djangoproject.com/en/5.1/topics/settings/

        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.1/ref/settings/
        """

        import os
        from pathlib import Path

        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent

        # /data/web/static
        # /data/web/media
        DATA_DIR = BASE_DIR.parent / 'data' / 'web'  # Essa pasta será criada com o Docker.


        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = os.getenv("SECRET_KEY", "change-me")  # Só puxamos o .env de SECRET_KEY

        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = bool(int(os.getenv('DEBUG', 0)))  # Busca variáveis de ambiente e pega o valor de debug

        ALLOWED_HOSTS = [
            h.strip() for h in os.getenv("ALLOWED_HOSTS", "").split(",") if h.strip()
        ]  # Aqui fazemos um for aninhado quebrando os valores por ,. Assim ele irá dividir e retornar cada um dos hosts nas .env


        # Application definition

        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
        ]

        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]

        ROOT_URLCONF = 'project.urls'

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]

        WSGI_APPLICATION = 'project.wsgi.application'


        # Database
        # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': os.getenv("DB_ENGINE", "change-me"),
                'NAME': os.getenv("POSTGRES_DB", "change-me"),
                'USER': os.getenv("POSTGRES_USER", "change-me"),
                'PASSWORD': os.getenv("POSTGRES_PASSWORD", "change-me"),
                'HOST': os.getenv("POSTGRES_HOST", "change-me"),
                'PORT': os.getenv("POSTGRES_PORT", "change-me")
            }
        }


        # Password validation
        # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


        # Internationalization
        # https://docs.djangoproject.com/en/5.1/topics/i18n/

        LANGUAGE_CODE = 'pt-br'

        TIME_ZONE = 'America/Sao_Paulo'

        USE_I18N = True

        USE_TZ = True


        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/5.1/howto/static-files/

        STATIC_URL = '/static/'
        STATIC_ROOT = DATA_DIR / 'static'  # Configurando arquivos estáticos em prod

        # Media files
        MEDIA_URL = '/media/'
        MEDIA_ROOT = DATA_DIR / 'media'  # Configurando arquivos de media em prod

        # Default primary key field type
        # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    5. Agora, iremos a urls.py de project e vamos adicionar o funcionamento de nossos
    settings no Django

        # type: ignore
        """
        URL configuration for project project.

        The `urlpatterns` list routes URLs to views. For more information please see:
            https://docs.djangoproject.com/en/5.1/topics/http/urls/
        Examples:
        Function views
            1. Add an import:  from my_app import views
            2. Add a URL to urlpatterns:  path('', views.home, name='home')
        Class-based views
            1. Add an import:  from other_app.views import Home
            2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
        Including another URLconf
            1. Import the include() function: from django.urls import include, path
            2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
        """
        from django.conf import settings
        from django.conf.urls.static import static
        from django.contrib import admin
        from django.urls import path

        urlpatterns = [
            path('admin/', admin.site.urls),
        ]


        # Isso é importante, por que senão, não conseguimos ver os arquivos de media
        # enviados pelo nosso usuário em nosso desenvolvimento
        if settings.DEBUG:
            urlpatterns += static(
                settings.MEDIA_URL,
                document_root=settings.MEDIA_ROOT
            )
