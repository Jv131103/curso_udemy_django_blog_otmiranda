        Completando o nosso model Page para páginas livres com HTML


Em models.py de blog vamos alterar:

    from django.contrib.auth.models import User
    from django.db import models
    from django.urls import reverse
    from django_summernote.models import AbstractAttachment
    from utils.images import resize_image
    from utils.rands import new_slugfy


    class PostAttachment(AbstractAttachment):
        def save(self, *args, **kwargs):
            if not self.name:
                self.name = self.file.name
            current_file_name = str(self.file.name)
            super_save = super().save(*args, **kwargs)
            file_changed = False
            if self.file:
                file_changed = current_file_name != self.file.name
            if file_changed:
                resize_image(self.file, 900)
            return super_save


    # Create your models here.
    class Tag(models.Model):
        class Meta:
            verbose_name = "Tag"
            verbose_name_plural = "Tags"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)

        def __str__(self) -> str:
            return self.name


    class Category(models.Model):
        class Meta:
            verbose_name = "Category"
            verbose_name_plural = "Categories"

        name = models.CharField(max_length=255)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.name)
            return super().save(*args, **kwargs)

        def __str__(self) -> str:
            return self.name


    class Page(models.Model):
        title = models.CharField(max_length=65,)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )
        is_published = models.BooleanField(
            default=False,
            help_text=(
                'Este campo precisará estar marcado para'
                'a página ser exibida publicamente.'
            )
        )
        content = models.TextField()

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.title)
            return super().save(*args, **kwargs)

        def get_absolute_url(self):
            if not self.is_published:
                return reverse('blog:index')
            return reverse('blog:page', args=(self.slug,))

        def __str__(self) -> str:
            return self.title


    class PostManager(models.Manager):
        def get_published(self):
            return self.filter(is_published=True).order_by("-pk")


    class Post(models.Model):
        class Meta:
            verbose_name = "Post"
            verbose_name_plural = "Posts"

        objects = PostManager()

        title = models.CharField(max_length=65,)
        slug = models.SlugField(
            unique=True,
            default=None,
            null=True,
            blank=True,
            max_length=255
        )
        excerpt = models.CharField(max_length=150)
        is_published = models.BooleanField(
            default=False,
            help_text=(
                'Este campo precisará estar marcado para'
                'o post ser exibido publicamente.'
            )
        )
        content = models.TextField()
        cover = models.ImageField(upload_to='posts/%Y/%m/', blank=True, default='')
        cover_in_post_content = models.BooleanField(
            default=True,
            help_text=(
                "Se marcado, exibirá a capa dentro do POST."
            )
        )
        created_at = models.DateTimeField(auto_now_add=True)
        created_by = models.ForeignKey(
            User,
            on_delete=models.SET_NULL,
            blank=True, null=True,
            related_name='post_created_by'
        )
        updated_at = models.DateTimeField(auto_now=True)
        updated_by = models.ForeignKey(
            User,
            on_delete=models.SET_NULL,
            blank=True, null=True,
            related_name='post_updated_by'
        )
        category = models.ForeignKey(
            Category, on_delete=models.SET_NULL, null=True, blank=True,
            default=None,
        )
        tags = models.ManyToManyField(Tag, blank=True, default='')

        def __str__(self) -> str:
            return self.title

        def get_absolute_url(self):
            if not self.is_published:
                return reverse('blog:index')
            return reverse('blog:post', args=(self.slug,))

        def save(self, *args, **kwargs):
            if not self.slug:
                self.slug = new_slugfy(self.title)
            current_cover_name = str(self.cover.name)
            super_save = super().save(*args, **kwargs)
            cover_changed = False
            if self.cover:
                cover_changed = current_cover_name != self.cover.name
            if cover_changed:
                resize_image(self.cover, 900)
            return super_save


Agora, em views.py vamos adicionar:

    from blog.models import Page, Post
    from django.core.paginator import Paginator
    from django.db.models import Q
    from django.shortcuts import render

    PER_PAGE = 9


    def index(request):
        posts = Post.objects.get_published()

        paginator = Paginator(posts, PER_PAGE)
        page_number = request.GET.get("page")
        page_obj = paginator.get_page(page_number)

        return render(
            request,
            'blog/pages/index.html',
            {
                'page_obj': page_obj,
            }
        )


    def created_by(request, author_pk):
        posts = Post.objects.get_published()\
            .filter(created_by__pk=author_pk)

        paginator = Paginator(posts, PER_PAGE)
        page_number = request.GET.get("page")
        page_obj = paginator.get_page(page_number)

        return render(
            request,
            'blog/pages/index.html',
            {
                'page_obj': page_obj,
            }
        )


    def category(request, slug):
        posts = Post.objects.get_published()\
            .filter(category__slug=slug)

        paginator = Paginator(posts, PER_PAGE)
        page_number = request.GET.get("page")
        page_obj = paginator.get_page(page_number)

        return render(
            request,
            'blog/pages/index.html',
            {
                'page_obj': page_obj,
            }
        )


    def tag(request, slug):
        posts = Post.objects.get_published()\
            .filter(tags__slug=slug)

        paginator = Paginator(posts, PER_PAGE)
        page_number = request.GET.get("page")
        page_obj = paginator.get_page(page_number)

        return render(
            request,
            'blog/pages/index.html',
            {
                'page_obj': page_obj,
            }
        )


    def search(request):
        search_value = request.GET.get('search', '').strip()

        posts = (
            Post.objects.get_published()
            .filter(
                Q(title__icontains=search_value) |
                Q(excerpt__icontains=search_value) |
                Q(content__icontains=search_value)
            )[:PER_PAGE]
        )

        return render(
            request,
            'blog/pages/index.html',
            {
                'page_obj': posts,
                'search_value': search_value,
            }
        )


    def page(request, slug):
        page = (
            Page.objects.filter(is_published=True)
            .filter(slug=slug)
            .first()
        )
        return render(
            request,
            'blog/pages/page.html',
            {
                'page_obj': page,
            }
        )


    def post(request, slug):
        post = (
            Post.objects.get_published()
            .filter(slug=slug)
            .first()
        )

        return render(
            request,
            'blog/pages/post.html',
            {
                'post': post,
            }
        )

E em page.html, vamos realizar:

    {% extends 'blog/base.html' %}

    {% block content %}
    <main class="main-content section-wrapper">
        <div class="section-content-narrow">
        <div class="section-gap">
            <h1 class="center">{{ page_obj.title }}</h1>
            {{ page_obj.content | safe }}
        </div>
        </div>
    </main>
    {% endblock content %}

